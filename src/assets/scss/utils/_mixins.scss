
@mixin rb {
  font-family: "DINPro-Bold";
}

@mixin rm {
  font-family: "DINPro-Medium";
}

@mixin rr {
  font-family: "DINPro";
}

@mixin mr {
  font-family: "MyriadPro-Regular";
}


@mixin transition ($target: all, $time: 0.4s, $timing: ease-in-out) {
  transition: $target $time $timing;
}

@mixin noselect {
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Chrome/Safari/Opera */
  -khtml-user-select: none; /* Konqueror */
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none;
  /* Non-prefixed version, currently
                         not supported by any browser */
}

@mixin select {
  appearance: none !important;
  -webkit-appearance: none !important;
  -moz-appearance: none !important;
  -ms-appearance: none !important;
  -o-appearance: none !important;
}

@mixin break($truncation-boundary: 100%) {
  word-wrap: break-word;
  overflow-wrap: break-word;
  max-width: $truncation-boundary;
}

@mixin text-overflow($truncation-boundary: 100%) {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: $truncation-boundary;
}

@mixin alignTransform {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin alignTransformHorizontal {
  left: 50%;
  transform: translateX(-50%);
}

@mixin alignTransformVertical {
  top: 50%;
  transform: translateY(-50%);
}

@mixin pseudo($content: '', $display: block, $pos: absolute){
  content: $content;
  display: $display;
  position: $pos;
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round( $size / 2.5 );
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round( $size / 2.5 );
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if  $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}

@function rem($pixels, $context: $browser-context) {
  @return #{$pixels/$context}rem
}

@mixin font-face( $font-name, $font-path, $font-weight: 400, $font-style: normal, $support-required: 'modern') {
  @font-face {
    font-family: $font-name;
    font-style : $font-style;
    font-weight: $font-weight;
    @if $support-required=='oldie' {
      src: url('#{$font-path}.eot');
      src: url('#{$font-path}.eot?#iefix') format('embedded-opentype'),
      url('#{$font-path}.woff2') format('woff2'),
      url('#{$font-path}.woff') format('woff'),
      url('#{$font-path}.ttf') format('truetype');
    }
    @if $support-required=='recent' {
      src: url('#{$font-path}.woff2') format('woff2'),
      url('#{$font-path}.woff') format('woff'),
      url('#{$font-path}.ttf') format('truetype');
    }
    @if $support-required=='modern' {
      src: url('#{$font-path}.woff2') format('woff2'),
      url('#{$font-path}.woff') format('woff');
    }
  }
  @if $support-required !='oldie' and $support-required !='recent' and $support-required !='modern' {
    @error 'Invalid support-required value. Must be "oldie"==>IE8 and above/ Android native browser 4+/ Safari 4.3 OR "recent"==>IE9+/ Android native browser 4.0+/ Safari 4.3+ OR "modern"==>IE9+/ Android native browser 4.4+/ Safari 5.1+';
  }
}
